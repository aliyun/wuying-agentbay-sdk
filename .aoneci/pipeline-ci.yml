# agentbay SDK Multi-Language CI/CD Pipeline
name: "agentbay SDK Multi-Language Quality Assurance"

triggers:
  push:
    branches:
    - "**"

# Strategy configuration to prevent jobs from being accidentally cancelled
strategy:
  cancel-in-progress: false
  fail-fast: false

params:
  python_enabled:
    name: Enable Python Testing
    type: boolean
    default: true
  typescript_enabled:
    name: Enable TypeScript Testing
    type: boolean
    default: true
  golang_enabled:
    name: Enable Golang Testing
    type: boolean
    default: true
  runs_on_resources:
    name: Resource Specification
    description: "Runtime container resource specification"
    default: "4-16Gi"
    options:
      - "4-16Gi"
      - "8-32Gi"
      - "16-64Gi"

jobs:
  # Python testing job
  python-lint-test:
    name: "Python Code Quality Check"
    when: "${{params.python_enabled}}"
    runs-on:
      - "${{params.runs_on_resources}}"
    image: alios-8u
    timeout: 1h
    retry:
      max: 2
      when:
        - runner_system_failure
        - stuck_or_timeout_failure
    steps:
      
      - uses: checkout
      - uses: setup-env
        inputs:
          python-version: '3.10'
      - id: python-lint
        continue-on-error: true
        name: "Python Code Format Check & Security Check"
        when: "${{params.python_enabled}}"
        run: |
          cd python
          python -m pip config set global.timeout 300
          python -m pip config set global.retries 3
          python -m pip install --upgrade pip 
          pip install black && black agentbay tests --check --diff
          pip install isort && isort --check-only --diff --verbose agentbay tests
          echo "Format check completed"
          pip install flake8 && flake8 agentbay tests --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=agentbay/modules/browser/eval
          echo "Quality check completed"
          pip install mypy
          pip install types-requests types-aiohttp types-Pillow types-setuptools types-pydantic || true
          mypy agentbay --install-types --no-error-summary --install-types --non-interactive
          echo "Type check completed"
          pip install bandit
          python -m bandit -r agentbay/ -v --skip B105,B106,B107
          echo "Bandit scan completed"
           echo "Executing pip-audit dependency vulnerability scan..."
          pip install pip-audit && pip-audit --desc
          echo "Dependency vulnerability scan completed"
      - id: python-test
        continue-on-error: true
        when: "${{params.python_enabled}}"
        name: "Python Unit Tests"
        run: |
          cd python
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --with dev
          poetry run pytest tests/unit -v


  # TypeScript testing job
  typescript-lint-test:
    name: "TypeScript Code Quality Check & Security Check"
    when: "${{params.typescript_enabled}}"
    image: alios-8u
    runs-on:
      - "${{params.runs_on_resources}}"
    retry:
      max: 2
      when:
        - runner_system_failure
        - stuck_or_timeout_failure
    steps:
      - uses: checkout
      - uses: setup-env
        inputs:
          node-version: "18"
          npm-version: "10"
          npm-cache: true
        
      - id: typescript-lint
        continue-on-error: true
        name: "TypeScript Code Format Check"
        when: "${{params.typescript_enabled}}"
        run: |
          cd typescript
          # Set npm timeout and retry strategy
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm ci --prefer-offline --no-audit
          npm run lint
      - id: typescript-test-unit
        continue-on-error: true
        when: "${{params.typescript_enabled}}"
        name: "TypeScript Unit Tests"
        run: |
          cd typescript
          # Reuse installed dependencies to avoid duplicate installation
          npm run build
          npm run test:unit

  # Golang testing job
  golang-lint-test:
    name: "Golang Code Quality Check & Security Check"
    when: "${{params.golang_enabled}}"
    image: alios-8u
    runs-on:
      - "${{params.runs_on_resources}}"
    retry:
      max: 2
      when:
        - runner_system_failure
        - stuck_or_timeout_failure
    steps:
      
      - uses: checkout
      - uses: setup-env
        inputs:
          go-version: "1.23.2"
          go-mod-cache: true
          go-cache: false
      - id: golang-lint
        continue-on-error: true
        name: "Golang Code Format Check"
        when: "${{params.golang_enabled}}"
        run: |
          # Configure Go environment
          go env -w GOPROXY=https://proxy.golang.org,direct
          go env -w GOSUMDB=sum.golang.org
          go env -w GONOSUMDB=""
          cd golang
          # Clean module cache
          go clean -modcache
          # Upgrade dependencies
          go get github.com/alibabacloud-go/darabonba-openapi/v2@latest
          go mod tidy
          go mod download
          go mod verify
          # Install linting tools
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
          curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
          go install golang.org/x/vuln/cmd/govulncheck@latest
          export PATH="$(go env GOPATH)/bin:$PATH"
          # Verify dependencies
          go build -v ./api/client/...
          # Code check
          go vet ./...
          # Linting
          golangci-lint run --timeout=5m --config=.golangci.yml || echo "Linting completed with issues found."
          # Security scan
          gosec -fmt json -out gosec-results.json ./... || true
          # Vulnerability check
          govulncheck ./... || true
      - id: golang-unit-test
        continue-on-error: true
        when: "${{params.golang_enabled}}"
        name: "Golang Unit Tests"
        run: |
          go env -w GOPROXY=https://proxy.golang.org,direct
          go env -w GOSUMDB=sum.golang.org
          go env -w GONOSUMDB=""
          cd golang
          go clean -modcache
          go get github.com/alibabacloud-go/darabonba-openapi/v2@latest
          go mod tidy
          go mod download
          go mod verify
          go build -v ./...
          go test -race -v ./tests/pkg/unit/...

  summary:
    name: "Multi-Language Quality Check Summary"
    needs: ["python-lint-test", "typescript-lint-test", "golang-lint-test"]
    runs-on:
      - "4-16Gi"
    steps:
      - run: |
          echo "=========================================="
          echo "    agentbay SDK Multi-Language Quality Check Summary"
          echo "=========================================="

          PYTHON_LINT_STATUS="${{steps.python-lint-test.python-lint.status}}"
          PYTHON_TEST_STATUS="${{steps.python-lint-test.python-test.status}}"
          TS_LINT_STATUS="${{steps.typescript-lint-test.typescript-lint.status}}"
          TS_TEST_STATUS="${{steps.typescript-lint-test.typescript-test-unit.status}}"
          GO_LINT_STATUS="${{steps.golang-lint-test.golang-lint.status}}"
          GO_TEST_STATUS="${{steps.golang-lint-test.golang-unit-test.status}}"

          FAILED=0

          # Check Python results
          if [ "$PYTHON_LINT_STATUS" != "success" ]; then
            echo "❌ Python Lint: FAILED"
            FAILED=1
          else
            echo "✅ Python Lint: PASSED"
          fi

          if [ "$PYTHON_TEST_STATUS" != "success" ]; then
            echo "❌ Python Unit Tests: FAILED"
            FAILED=1
          else
            echo "✅ Python Unit Tests: PASSED"
          fi

          # Check TypeScript results
          if [ "$TS_LINT_STATUS" != "success" ]; then
            echo "❌ TypeScript Lint: FAILED"
            FAILED=1
          else
            echo "✅ TypeScript Lint: PASSED"
          fi

          if [ "$TS_TEST_STATUS" != "success" ]; then
            echo "❌ TypeScript Unit Tests: FAILED"
            FAILED=1
          else
            echo "✅ TypeScript Unit Tests: PASSED"
          fi

          # Check Golang results
          if [ "$GO_LINT_STATUS" != "success" ]; then
            echo "❌ Golang Lint: FAILED"
            FAILED=1
          else
            echo "✅ Golang Lint: PASSED"
          fi

          if [ "$GO_TEST_STATUS" != "success" ]; then
            echo "❌ Golang Unit Tests: FAILED"
            FAILED=1
          else
            echo "✅ Golang Unit Tests: PASSED"
          fi

          echo "=========================================="

          if [ $FAILED -eq 1 ]; then
            echo "❌ Quality Check: FAILED"
            echo "Please check the detailed reports above for more information."
            exit 1
          else
            echo "✅ All Quality Checks: PASSED"
          fi

          echo "=========================================="