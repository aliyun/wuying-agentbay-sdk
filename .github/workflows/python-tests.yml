name: Python Tests

on:
  pull_request:
    branches: [ main, v0.3.0_dev, v0.4.0_dev ]
    paths:
      - 'python/**'
      - '.github/workflows/python-tests.yml'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Get full history for SonarQube analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black bandit pip-audit

    - name: Lint Python code
      working-directory: ./python
      run: |
        # Run flake8 to check for code issues
        flake8 agentbay tests examples --count --select=E9,F63,F7,F82 --show-source --statistics

        # Use black to automatically format code
        black agentbay tests examples

        # Check if there are uncommitted changes (indicating formatting issues)
        git diff --exit-code || (echo "Formatting issues have been automatically fixed, please review the changes and commit them" && exit 1)

    - name: Security scan with Bandit
      working-directory: ./python
      run: |
        bandit -r agentbay -f json -o bandit-results.json

    - name: Check dependencies for vulnerabilities
      working-directory: ./python
      run: |
        # Install the package in development mode
        cd ./python && pip install -e .
        # Use pip-audit instead of deprecated safety check
        pip-audit || true

    - name: SonarQube Scan
      uses: SonarSource/sonarcloud-github-action@master
      if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ./python
        args: >
          -Dsonar.projectKey=wuying-agentbay-sdk_python
          -Dsonar.organization=wuying-agentbay
          -Dsonar.python.coverage.reportPaths=coverage.xml

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      working-directory: ./python
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
        poetry add --dev pytest-cov

    - name: Run unit tests
      working-directory: ./python
      run: |
        poetry run python -m pytest tests/unit -v


    # - name: Run integration tests (if API key is provided)
    #   working-directory: ./python
    #   if: ${{ secrets.AGENTBAY_API_KEY != '' }}
    #   env:
    #     AGENTBAY_API_KEY: ${{ secrets.AGENTBAY_API_KEY }}
    #   run: |
    #     poetry run python -m pytest tests/integration -v