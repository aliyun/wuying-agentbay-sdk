name: Golang Tests

on:
  workflow_call:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Get full history for SonarQube analysis

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: './golang/go.mod'
        check-latest: true

    - name: Configure Go environment
      run: |
        # Set reliable proxy settings
        go env -w GOPROXY=https://proxy.golang.org,direct
        go env -w GOSUMDB=sum.golang.org
        go env -w GONOSUMDB=""
        echo "Go environment configured:"
        go env | grep -E "(GOPROXY|GOSUMDB|GONOSUMDB)"

    - name: Install Go 1.24 (fallback if not available)
      if: failure()
      run: |
        echo "Fallback: Installing Go 1.24 manually..."
        # Try to get the latest Go 1.24 version (stable or rc)
        LATEST_GO_24=$(curl -s https://golang.org/dl/?mode=json | jq -r '.[].version' | grep '^go1\.24' | head -1)
        if [ -z "$LATEST_GO_24" ]; then
          echo "Go 1.24 not found, trying rc version..."
          LATEST_GO_24=$(curl -s https://golang.org/dl/?mode=json | jq -r '.[].version' | grep '^go1\.24rc' | head -1)
        fi
        if [ -z "$LATEST_GO_24" ]; then
          echo "Go 1.24 not available, using 1.23 instead"
          LATEST_GO_24="go1.23.4"
        fi
        echo "Installing $LATEST_GO_24..."
        wget -q "https://go.dev/dl/${LATEST_GO_24}.linux-amd64.tar.gz" -O go.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf go.tar.gz
        echo "/usr/local/go/bin" >> $GITHUB_PATH
        go version

    - name: Verify Go installation
      run: |
        go version
        echo "Go version: $(go version)"
        echo "GOROOT: $GOROOT"
        echo "GOPATH: $GOPATH"

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./golang
      run: |
        echo "Current Go version: $(go version)"

        # Clean module cache only once to avoid version conflicts
        go clean -modcache

        # Upgrade to latest compatible versions
        go get github.com/alibabacloud-go/darabonba-openapi/v2@latest
        go mod tidy

        # Download and verify dependencies
        go mod download
        go mod verify

        echo "Final dependency versions:"
        go list -m all | grep alibabacloud-go

    - name: Install linting tools
      run: |
        echo "Installing tools with Go version: $(go version)"

        # Clean module cache to avoid version conflicts
        go clean -modcache

        # Install golangci-lint for comprehensive linting (use latest v2.x.x for Go 1.24)
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest

        # Install gosec for security scanning using binary release
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2

        # Install govulncheck for vulnerability scanning
        go install golang.org/x/vuln/cmd/govulncheck@latest

        # Ensure tools are in PATH
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

        # Verify tool versions
        echo "golangci-lint version: $($(go env GOPATH)/bin/golangci-lint --version)"

    - name: Verify dependencies
      working-directory: ./golang
      run: |
        echo "Verifying dependency setup..."

        # Show current module versions (dependencies already downloaded)
        echo "Current module versions:"
        go list -m all | grep -E "(darabonba-openapi|tea)"

        # Verify that the client types are available
        echo "Checking if types are available..."
        go mod why github.com/alibabacloud-go/darabonba-openapi/v2

        # Test compilation of the problematic file
        echo "Testing compilation of api/client..."
        go build -v ./api/client/...

    # - name: Format check
    #   working-directory: ./golang
    #   run: |
    #     # Check if code is properly formatted
    #     unformatted=$(gofmt -l .)
    #     if [ -n "$unformatted" ]; then
    #       echo "The following files are not properly formatted:"
    #       echo "$unformatted"
    #       echo "Please run 'go fmt ./...' to format the code"
    #       exit 1
    #     fi

    - name: Go vet
      working-directory: ./golang
      run: |
        go vet ./...

    - name: Lint Go code
      working-directory: ./golang
      run: |
        # Debug: Show versions and environment
        echo "Go version: $(go version)"
        echo "golangci-lint version: $(golangci-lint --version)"
        echo "Go sum file exists: $(test -f go.sum && echo 'yes' || echo 'no')"

        # Run golangci-lint with updated configuration file (dependencies already available)
        echo "Running golangci-lint with custom configuration..."
        golangci-lint run --timeout=5m --config=.golangci.yml || {
          echo "Linting completed with issues found."
          echo "Issues found will be reported but won't fail the build."
          echo "Please review and fix the linting issues when possible."
        }

    - name: Security scan with gosec
      working-directory: ./golang
      run: |
        # Run security scan and output results in JSON format
        gosec -fmt json -out gosec-results.json ./... || true

    - name: Check for vulnerabilities
      working-directory: ./golang
      run: |
        # Check for known vulnerabilities in dependencies
        govulncheck ./... || true

    - name: SonarQube Scan
      uses: SonarSource/sonarcloud-github-action@master
      if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ./golang
        args: >
          -Dsonar.projectKey=wuying-agentbay-sdk_golang
          -Dsonar.organization=wuying-agentbay
          -Dsonar.go.coverage.reportPaths=coverage.xml

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true
        cache: false
      continue-on-error: true
      id: setup_go

    - name: Configure Go environment (test matrix)
      if: steps.setup_go.outcome == 'success'
      run: |
        # Set reliable proxy settings
        go env -w GOPROXY=https://proxy.golang.org,direct
        go env -w GOSUMDB=sum.golang.org
        go env -w GONOSUMDB=""

    - name: Install Go manually (fallback for 1.24)
      if: steps.setup_go.outcome == 'failure' && matrix.go-version == '1.24'
      run: |
        echo "Manual installation for Go 1.24..."
        # Try to get the latest Go 1.24 version
        LATEST_GO=$(curl -s https://golang.org/dl/?mode=json | jq -r '.[].version' | grep '^go1\.24' | head -1)
        if [ -z "$LATEST_GO" ]; then
          LATEST_GO="go1.24rc1"  # Use rc1 if stable not available
        fi
        echo "Installing $LATEST_GO..."
        wget -q "https://go.dev/dl/${LATEST_GO}.linux-amd64.tar.gz" -O go.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf go.tar.gz
        echo "/usr/local/go/bin" >> $GITHUB_PATH
        go version

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Verify dependencies
      working-directory: ./golang
      run: |
        echo "Test matrix Go version: $(go version)"

        # Only clean if we're using a different Go version than lint job
        if [[ "$(go version)" != *"go1.24"* ]]; then
          echo "Different Go version detected, cleaning module cache..."
          go clean -modcache
          go get github.com/alibabacloud-go/darabonba-openapi/v2@latest
          go mod tidy
          go mod download
          go mod verify
        else
          echo "Same Go version as lint job, dependencies should already be available"
          go mod verify
        fi

    - name: Build
      working-directory: ./golang
      run: |
        go build -v ./...

    - name: Run unit tests
      working-directory: ./golang
      run: |
        # Run unit tests with race detection and verbose output
        go test -race -v ./tests/pkg/unit/...

    # - name: Run integration tests
    #   working-directory: ./golang
    #   run: |
    #     # Run integration tests if they exist
    #     if [ -d "./tests/pkg/integration" ]; then
    #       go test -race -v ./tests/pkg/integration/...
    #     fi

    # - name: Run package tests
    #   working-directory: ./golang
    #   run: |
    #     # Run main package tests
    #     if [ -d "./tests/pkg/agentbay" ]; then
    #       go test -race -v ./tests/pkg/agentbay/...
    #     fi

    # - name: Test examples
    #   working-directory: ./golang
    #   run: |
    #     # Build all examples to ensure they compile
    #     for example_dir in ./examples/*/; do
    #       if [ -f "$example_dir/main.go" ]; then
    #         echo "Building example: $example_dir"
    #         (cd "$example_dir" && go build -v .)
    #       fi
    #     done