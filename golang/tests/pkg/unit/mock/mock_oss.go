// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: OSSInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	oss "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/oss"
	gomock "github.com/golang/mock/gomock"
)

// MockOSSInterface is a mock of OSSInterface interface.
type MockOSSInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOSSInterfaceMockRecorder
}

// MockOSSInterfaceMockRecorder is the mock recorder for MockOSSInterface.
type MockOSSInterfaceMockRecorder struct {
	mock *MockOSSInterface
}

// NewMockOSSInterface creates a new mock instance.
func NewMockOSSInterface(ctrl *gomock.Controller) *MockOSSInterface {
	mock := &MockOSSInterface{ctrl: ctrl}
	mock.recorder = &MockOSSInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSSInterface) EXPECT() *MockOSSInterfaceMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockOSSInterface) Download(arg0, arg1, arg2 string) (*oss.DownloadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1, arg2)
	ret0, _ := ret[0].(*oss.DownloadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockOSSInterfaceMockRecorder) Download(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockOSSInterface)(nil).Download), arg0, arg1, arg2)
}

// DownloadAnonymous mocks base method.
func (m *MockOSSInterface) DownloadAnonymous(arg0, arg1 string) (*oss.DownloadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAnonymous", arg0, arg1)
	ret0, _ := ret[0].(*oss.DownloadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAnonymous indicates an expected call of DownloadAnonymous.
func (mr *MockOSSInterfaceMockRecorder) DownloadAnonymous(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAnonymous", reflect.TypeOf((*MockOSSInterface)(nil).DownloadAnonymous), arg0, arg1)
}

// EnvInit mocks base method.
func (m *MockOSSInterface) EnvInit(arg0, arg1, arg2, arg3, arg4 string) (*oss.EnvInitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvInit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*oss.EnvInitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvInit indicates an expected call of EnvInit.
func (mr *MockOSSInterfaceMockRecorder) EnvInit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvInit", reflect.TypeOf((*MockOSSInterface)(nil).EnvInit), arg0, arg1, arg2, arg3, arg4)
}

// Upload mocks base method.
func (m *MockOSSInterface) Upload(arg0, arg1, arg2 string) (*oss.UploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2)
	ret0, _ := ret[0].(*oss.UploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockOSSInterfaceMockRecorder) Upload(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockOSSInterface)(nil).Upload), arg0, arg1, arg2)
}

// UploadAnonymous mocks base method.
func (m *MockOSSInterface) UploadAnonymous(arg0, arg1 string) (*oss.UploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAnonymous", arg0, arg1)
	ret0, _ := ret[0].(*oss.UploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAnonymous indicates an expected call of UploadAnonymous.
func (mr *MockOSSInterfaceMockRecorder) UploadAnonymous(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAnonymous", reflect.TypeOf((*MockOSSInterface)(nil).UploadAnonymous), arg0, arg1)
}
