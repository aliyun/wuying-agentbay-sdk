// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: CommandInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	command "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/command"
	gomock "github.com/golang/mock/gomock"
)

// MockCommandInterface is a mock of CommandInterface interface.
type MockCommandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommandInterfaceMockRecorder
}

// MockCommandInterfaceMockRecorder is the mock recorder for MockCommandInterface.
type MockCommandInterfaceMockRecorder struct {
	mock *MockCommandInterface
}

// NewMockCommandInterface creates a new mock instance.
func NewMockCommandInterface(ctrl *gomock.Controller) *MockCommandInterface {
	mock := &MockCommandInterface{ctrl: ctrl}
	mock.recorder = &MockCommandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandInterface) EXPECT() *MockCommandInterfaceMockRecorder {
	return m.recorder
}

// ExecuteCommand mocks base method.
func (m *MockCommandInterface) ExecuteCommand(arg0 string, arg1 ...int) (*command.CommandResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteCommand", varargs...)
	ret0, _ := ret[0].(*command.CommandResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockCommandInterfaceMockRecorder) ExecuteCommand(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockCommandInterface)(nil).ExecuteCommand), varargs...)
}
