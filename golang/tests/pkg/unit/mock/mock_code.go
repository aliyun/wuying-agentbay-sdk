// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: CodeInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	code "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/code"
	gomock "github.com/golang/mock/gomock"
)

// MockCodeInterface is a mock of CodeInterface interface.
type MockCodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCodeInterfaceMockRecorder
}

// MockCodeInterfaceMockRecorder is the mock recorder for MockCodeInterface.
type MockCodeInterfaceMockRecorder struct {
	mock *MockCodeInterface
}

// NewMockCodeInterface creates a new mock instance.
func NewMockCodeInterface(ctrl *gomock.Controller) *MockCodeInterface {
	mock := &MockCodeInterface{ctrl: ctrl}
	mock.recorder = &MockCodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeInterface) EXPECT() *MockCodeInterfaceMockRecorder {
	return m.recorder
}

// RunCode mocks base method.
func (m *MockCodeInterface) RunCode(arg0, arg1 string, arg2 ...int) (*code.CodeResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCode", varargs...)
	ret0, _ := ret[0].(*code.CodeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCode indicates an expected call of RunCode.
func (mr *MockCodeInterfaceMockRecorder) RunCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCode", reflect.TypeOf((*MockCodeInterface)(nil).RunCode), varargs...)
}
