// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: UIInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	ui "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/ui"
	gomock "github.com/golang/mock/gomock"
)

// MockUIInterface is a mock of UIInterface interface.
type MockUIInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUIInterfaceMockRecorder
}

// MockUIInterfaceMockRecorder is the mock recorder for MockUIInterface.
type MockUIInterfaceMockRecorder struct {
	mock *MockUIInterface
}

// NewMockUIInterface creates a new mock instance.
func NewMockUIInterface(ctrl *gomock.Controller) *MockUIInterface {
	mock := &MockUIInterface{ctrl: ctrl}
	mock.recorder = &MockUIInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUIInterface) EXPECT() *MockUIInterfaceMockRecorder {
	return m.recorder
}

// Click mocks base method.
func (m *MockUIInterface) Click(arg0, arg1 int, arg2 string) (*ui.UIResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Click", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ui.UIResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Click indicates an expected call of Click.
func (mr *MockUIInterfaceMockRecorder) Click(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Click", reflect.TypeOf((*MockUIInterface)(nil).Click), arg0, arg1, arg2)
}

// GetAllUIElements mocks base method.
func (m *MockUIInterface) GetAllUIElements(arg0 int) (*ui.UIElementsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUIElements", arg0)
	ret0, _ := ret[0].(*ui.UIElementsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUIElements indicates an expected call of GetAllUIElements.
func (mr *MockUIInterfaceMockRecorder) GetAllUIElements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUIElements", reflect.TypeOf((*MockUIInterface)(nil).GetAllUIElements), arg0)
}

// GetClickableUIElements mocks base method.
func (m *MockUIInterface) GetClickableUIElements(arg0 int) (*ui.UIElementsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClickableUIElements", arg0)
	ret0, _ := ret[0].(*ui.UIElementsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClickableUIElements indicates an expected call of GetClickableUIElements.
func (mr *MockUIInterfaceMockRecorder) GetClickableUIElements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClickableUIElements", reflect.TypeOf((*MockUIInterface)(nil).GetClickableUIElements), arg0)
}

// InputText mocks base method.
func (m *MockUIInterface) InputText(arg0 string) (*ui.TextInputResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputText", arg0)
	ret0, _ := ret[0].(*ui.TextInputResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputText indicates an expected call of InputText.
func (mr *MockUIInterfaceMockRecorder) InputText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputText", reflect.TypeOf((*MockUIInterface)(nil).InputText), arg0)
}

// Screenshot mocks base method.
func (m *MockUIInterface) Screenshot() (*ui.UIResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Screenshot")
	ret0, _ := ret[0].(*ui.UIResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Screenshot indicates an expected call of Screenshot.
func (mr *MockUIInterfaceMockRecorder) Screenshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screenshot", reflect.TypeOf((*MockUIInterface)(nil).Screenshot))
}

// SendKey mocks base method.
func (m *MockUIInterface) SendKey(arg0 int) (*ui.KeyActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendKey", arg0)
	ret0, _ := ret[0].(*ui.KeyActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendKey indicates an expected call of SendKey.
func (mr *MockUIInterfaceMockRecorder) SendKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendKey", reflect.TypeOf((*MockUIInterface)(nil).SendKey), arg0)
}

// Swipe mocks base method.
func (m *MockUIInterface) Swipe(arg0, arg1, arg2, arg3, arg4 int) (*ui.SwipeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Swipe", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*ui.SwipeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Swipe indicates an expected call of Swipe.
func (mr *MockUIInterfaceMockRecorder) Swipe(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Swipe", reflect.TypeOf((*MockUIInterface)(nil).Swipe), arg0, arg1, arg2, arg3, arg4)
}
