// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: ApplicationInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	application "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/application"
	gomock "github.com/golang/mock/gomock"
)

// MockApplicationInterface is a mock of ApplicationInterface interface.
type MockApplicationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationInterfaceMockRecorder
}

// MockApplicationInterfaceMockRecorder is the mock recorder for MockApplicationInterface.
type MockApplicationInterfaceMockRecorder struct {
	mock *MockApplicationInterface
}

// NewMockApplicationInterface creates a new mock instance.
func NewMockApplicationInterface(ctrl *gomock.Controller) *MockApplicationInterface {
	mock := &MockApplicationInterface{ctrl: ctrl}
	mock.recorder = &MockApplicationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationInterface) EXPECT() *MockApplicationInterfaceMockRecorder {
	return m.recorder
}

// GetInstalledApps mocks base method.
func (m *MockApplicationInterface) GetInstalledApps(arg0, arg1, arg2 bool) (*application.ApplicationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledApps", arg0, arg1, arg2)
	ret0, _ := ret[0].(*application.ApplicationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledApps indicates an expected call of GetInstalledApps.
func (mr *MockApplicationInterfaceMockRecorder) GetInstalledApps(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledApps", reflect.TypeOf((*MockApplicationInterface)(nil).GetInstalledApps), arg0, arg1, arg2)
}

// ListVisibleApps mocks base method.
func (m *MockApplicationInterface) ListVisibleApps() (*application.ProcessListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVisibleApps")
	ret0, _ := ret[0].(*application.ProcessListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVisibleApps indicates an expected call of ListVisibleApps.
func (mr *MockApplicationInterfaceMockRecorder) ListVisibleApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVisibleApps", reflect.TypeOf((*MockApplicationInterface)(nil).ListVisibleApps))
}

// StartApp mocks base method.
func (m *MockApplicationInterface) StartApp(arg0, arg1, arg2 string) (*application.ProcessListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(*application.ProcessListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApp indicates an expected call of StartApp.
func (mr *MockApplicationInterfaceMockRecorder) StartApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApp", reflect.TypeOf((*MockApplicationInterface)(nil).StartApp), arg0, arg1, arg2)
}

// StopAppByCmd mocks base method.
func (m *MockApplicationInterface) StopAppByCmd(arg0 string) (*application.AppOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAppByCmd", arg0)
	ret0, _ := ret[0].(*application.AppOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAppByCmd indicates an expected call of StopAppByCmd.
func (mr *MockApplicationInterfaceMockRecorder) StopAppByCmd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppByCmd", reflect.TypeOf((*MockApplicationInterface)(nil).StopAppByCmd), arg0)
}

// StopAppByPID mocks base method.
func (m *MockApplicationInterface) StopAppByPID(arg0 int) (*application.AppOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAppByPID", arg0)
	ret0, _ := ret[0].(*application.AppOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAppByPID indicates an expected call of StopAppByPID.
func (mr *MockApplicationInterfaceMockRecorder) StopAppByPID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppByPID", reflect.TypeOf((*MockApplicationInterface)(nil).StopAppByPID), arg0)
}

// StopAppByPName mocks base method.
func (m *MockApplicationInterface) StopAppByPName(arg0 string) (*application.AppOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAppByPName", arg0)
	ret0, _ := ret[0].(*application.AppOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAppByPName indicates an expected call of StopAppByPName.
func (mr *MockApplicationInterfaceMockRecorder) StopAppByPName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppByPName", reflect.TypeOf((*MockApplicationInterface)(nil).StopAppByPName), arg0)
}
