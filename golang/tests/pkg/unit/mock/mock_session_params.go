// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: SessionParamsInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	agentbay "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionParamsInterface is a mock of SessionParamsInterface interface.
type MockSessionParamsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionParamsInterfaceMockRecorder
}

// MockSessionParamsInterfaceMockRecorder is the mock recorder for MockSessionParamsInterface.
type MockSessionParamsInterfaceMockRecorder struct {
	mock *MockSessionParamsInterface
}

// NewMockSessionParamsInterface creates a new mock instance.
func NewMockSessionParamsInterface(ctrl *gomock.Controller) *MockSessionParamsInterface {
	mock := &MockSessionParamsInterface{ctrl: ctrl}
	mock.recorder = &MockSessionParamsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionParamsInterface) EXPECT() *MockSessionParamsInterfaceMockRecorder {
	return m.recorder
}

// AddContextSync mocks base method.
func (m *MockSessionParamsInterface) AddContextSync(arg0, arg1 string, arg2 *agentbay.SyncPolicy) *agentbay.CreateSessionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContextSync", arg0, arg1, arg2)
	ret0, _ := ret[0].(*agentbay.CreateSessionParams)
	return ret0
}

// AddContextSync indicates an expected call of AddContextSync.
func (mr *MockSessionParamsInterfaceMockRecorder) AddContextSync(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContextSync", reflect.TypeOf((*MockSessionParamsInterface)(nil).AddContextSync), arg0, arg1, arg2)
}

// AddContextSyncConfig mocks base method.
func (m *MockSessionParamsInterface) AddContextSyncConfig(arg0 *agentbay.ContextSync) *agentbay.CreateSessionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContextSyncConfig", arg0)
	ret0, _ := ret[0].(*agentbay.CreateSessionParams)
	return ret0
}

// AddContextSyncConfig indicates an expected call of AddContextSyncConfig.
func (mr *MockSessionParamsInterfaceMockRecorder) AddContextSyncConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContextSyncConfig", reflect.TypeOf((*MockSessionParamsInterface)(nil).AddContextSyncConfig), arg0)
}

// GetLabelsJSON mocks base method.
func (m *MockSessionParamsInterface) GetLabelsJSON() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsJSON")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsJSON indicates an expected call of GetLabelsJSON.
func (mr *MockSessionParamsInterfaceMockRecorder) GetLabelsJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsJSON", reflect.TypeOf((*MockSessionParamsInterface)(nil).GetLabelsJSON))
}

// NewCreateSessionParams mocks base method.
func (m *MockSessionParamsInterface) NewCreateSessionParams() *agentbay.CreateSessionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateSessionParams")
	ret0, _ := ret[0].(*agentbay.CreateSessionParams)
	return ret0
}

// NewCreateSessionParams indicates an expected call of NewCreateSessionParams.
func (mr *MockSessionParamsInterfaceMockRecorder) NewCreateSessionParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateSessionParams", reflect.TypeOf((*MockSessionParamsInterface)(nil).NewCreateSessionParams))
}

// WithContextID mocks base method.
func (m *MockSessionParamsInterface) WithContextID(arg0 string) *agentbay.CreateSessionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContextID", arg0)
	ret0, _ := ret[0].(*agentbay.CreateSessionParams)
	return ret0
}

// WithContextID indicates an expected call of WithContextID.
func (mr *MockSessionParamsInterfaceMockRecorder) WithContextID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContextID", reflect.TypeOf((*MockSessionParamsInterface)(nil).WithContextID), arg0)
}

// WithContextSync mocks base method.
func (m *MockSessionParamsInterface) WithContextSync(arg0 []*agentbay.ContextSync) *agentbay.CreateSessionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContextSync", arg0)
	ret0, _ := ret[0].(*agentbay.CreateSessionParams)
	return ret0
}

// WithContextSync indicates an expected call of WithContextSync.
func (mr *MockSessionParamsInterfaceMockRecorder) WithContextSync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContextSync", reflect.TypeOf((*MockSessionParamsInterface)(nil).WithContextSync), arg0)
}

// WithImageId mocks base method.
func (m *MockSessionParamsInterface) WithImageId(arg0 string) *agentbay.CreateSessionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithImageId", arg0)
	ret0, _ := ret[0].(*agentbay.CreateSessionParams)
	return ret0
}

// WithImageId indicates an expected call of WithImageId.
func (mr *MockSessionParamsInterfaceMockRecorder) WithImageId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithImageId", reflect.TypeOf((*MockSessionParamsInterface)(nil).WithImageId), arg0)
}

// WithLabels mocks base method.
func (m *MockSessionParamsInterface) WithLabels(arg0 map[string]string) *agentbay.CreateSessionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLabels", arg0)
	ret0, _ := ret[0].(*agentbay.CreateSessionParams)
	return ret0
}

// WithLabels indicates an expected call of WithLabels.
func (mr *MockSessionParamsInterfaceMockRecorder) WithLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabels", reflect.TypeOf((*MockSessionParamsInterface)(nil).WithLabels), arg0)
}
