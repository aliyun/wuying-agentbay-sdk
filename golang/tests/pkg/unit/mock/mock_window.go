// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: WindowInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	window "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/window"
	gomock "github.com/golang/mock/gomock"
)

// MockWindowInterface is a mock of WindowInterface interface.
type MockWindowInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWindowInterfaceMockRecorder
}

// MockWindowInterfaceMockRecorder is the mock recorder for MockWindowInterface.
type MockWindowInterfaceMockRecorder struct {
	mock *MockWindowInterface
}

// NewMockWindowInterface creates a new mock instance.
func NewMockWindowInterface(ctrl *gomock.Controller) *MockWindowInterface {
	mock := &MockWindowInterface{ctrl: ctrl}
	mock.recorder = &MockWindowInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWindowInterface) EXPECT() *MockWindowInterfaceMockRecorder {
	return m.recorder
}

// ActivateWindow mocks base method.
func (m *MockWindowInterface) ActivateWindow(arg0 int) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateWindow", arg0)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateWindow indicates an expected call of ActivateWindow.
func (mr *MockWindowInterfaceMockRecorder) ActivateWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateWindow", reflect.TypeOf((*MockWindowInterface)(nil).ActivateWindow), arg0)
}

// CloseWindow mocks base method.
func (m *MockWindowInterface) CloseWindow(arg0 int) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWindow", arg0)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseWindow indicates an expected call of CloseWindow.
func (mr *MockWindowInterfaceMockRecorder) CloseWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWindow", reflect.TypeOf((*MockWindowInterface)(nil).CloseWindow), arg0)
}

// FocusMode mocks base method.
func (m *MockWindowInterface) FocusMode(arg0 bool) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FocusMode", arg0)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FocusMode indicates an expected call of FocusMode.
func (mr *MockWindowInterfaceMockRecorder) FocusMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusMode", reflect.TypeOf((*MockWindowInterface)(nil).FocusMode), arg0)
}

// FullscreenWindow mocks base method.
func (m *MockWindowInterface) FullscreenWindow(arg0 int) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullscreenWindow", arg0)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullscreenWindow indicates an expected call of FullscreenWindow.
func (mr *MockWindowInterfaceMockRecorder) FullscreenWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullscreenWindow", reflect.TypeOf((*MockWindowInterface)(nil).FullscreenWindow), arg0)
}

// GetActiveWindow mocks base method.
func (m *MockWindowInterface) GetActiveWindow() (*window.WindowDetailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveWindow")
	ret0, _ := ret[0].(*window.WindowDetailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveWindow indicates an expected call of GetActiveWindow.
func (mr *MockWindowInterfaceMockRecorder) GetActiveWindow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveWindow", reflect.TypeOf((*MockWindowInterface)(nil).GetActiveWindow))
}

// ListRootWindows mocks base method.
func (m *MockWindowInterface) ListRootWindows() (*window.WindowListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRootWindows")
	ret0, _ := ret[0].(*window.WindowListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRootWindows indicates an expected call of ListRootWindows.
func (mr *MockWindowInterfaceMockRecorder) ListRootWindows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRootWindows", reflect.TypeOf((*MockWindowInterface)(nil).ListRootWindows))
}

// MaximizeWindow mocks base method.
func (m *MockWindowInterface) MaximizeWindow(arg0 int) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaximizeWindow", arg0)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaximizeWindow indicates an expected call of MaximizeWindow.
func (mr *MockWindowInterfaceMockRecorder) MaximizeWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaximizeWindow", reflect.TypeOf((*MockWindowInterface)(nil).MaximizeWindow), arg0)
}

// MinimizeWindow mocks base method.
func (m *MockWindowInterface) MinimizeWindow(arg0 int) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinimizeWindow", arg0)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MinimizeWindow indicates an expected call of MinimizeWindow.
func (mr *MockWindowInterfaceMockRecorder) MinimizeWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinimizeWindow", reflect.TypeOf((*MockWindowInterface)(nil).MinimizeWindow), arg0)
}

// ResizeWindow mocks base method.
func (m *MockWindowInterface) ResizeWindow(arg0, arg1, arg2 int) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeWindow", arg0, arg1, arg2)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeWindow indicates an expected call of ResizeWindow.
func (mr *MockWindowInterfaceMockRecorder) ResizeWindow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeWindow", reflect.TypeOf((*MockWindowInterface)(nil).ResizeWindow), arg0, arg1, arg2)
}

// RestoreWindow mocks base method.
func (m *MockWindowInterface) RestoreWindow(arg0 int) (*window.WindowResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWindow", arg0)
	ret0, _ := ret[0].(*window.WindowResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWindow indicates an expected call of RestoreWindow.
func (mr *MockWindowInterfaceMockRecorder) RestoreWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWindow", reflect.TypeOf((*MockWindowInterface)(nil).RestoreWindow), arg0)
}
